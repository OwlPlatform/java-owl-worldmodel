/*
 * Owl Platform World Model Library for Java
 * Copyright (C) 2012 Robert Moore and the Owl Platform
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *  
 * You should have received a copy of the GNU Lesser General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
package com.owlplatform.worldmodel.client;
/**
 * A placeholder for the set of data that will be returned
 * from the world model as a result of a snapshot request.
 * @author Robert Moore
 *
 */
public class Response {
  /**
   * The Identifiers and associated Attributes returned by the world model.
   */
	private WorldState state = null;

	/**
	 * Flag to indicate that calls to get() will succeed without blocking.
	 */
	private volatile boolean ready = false;

	/**
	 * An exception that was thrown by the request to the world model.
	 */
	private Exception error = null;

	/**
	 * The connection that the data will come from.
	 */
	private final ClientWorldConnection conn;

	/**
	 * The ticket number assigned to the request.
	 */
	private long ticketNumber = 0;

	/**
	 * Creates a new Response using the provided ticket number and connection.
	 * @param conn for canceling the request.
	 * @param ticketNumber the ticket number assigned to the request.
	 */
	Response(final ClientWorldConnection conn, final long ticketNumber) {
		this.conn = conn;
		this.ticketNumber = ticketNumber;
	}

	/**
	 * Retrieves the WorldState for this Response object. This method will block
	 * until the response is completed from the World Model. Callers may wish to
	 * call {@link #ready()} first if they don't want to block.
	 * 
	 * @return the WorldState for this Response object.
	 * @throws Exception
	 *             if an exception occurs during the request.
	 */
	public WorldState get() throws Exception {
		while (!this.ready) {
			synchronized (this) {
				try {
					this.wait();
				} catch (InterruptedException e) {
					// Ignored
					Thread.yield();
				}
			}
		}
		if (this.error != null) {
			throw this.error;
		}
		return this.state;
	}

	/**
	 * Sets the state of this Response message. This method should only be
	 * called once.
	 * 
	 * @param state
	 */
	void setState(final WorldState state) {
		if (this.ready) {
			throw new IllegalStateException(
					"Cannot reassign the world state of a response.");
		}
		this.state = state;
		this.ready = true;
		// Notify any blocking/waiting threads
		synchronized (this) {
			this.notifyAll();
		}
	}

	/**
	 * Sets the exception for this response and notifies any waiting threads.
	 * Any calls to get() will have the exception thrown when an Exception is
	 * set.
	 * 
	 * @param error
	 *            the exception for this response.
	 */
	void setError(Exception error) {
		if (this.error != null) {
			throw new IllegalStateException(
					"Cannot reassign the error value of a response.");
		}
		this.error = error;
		this.ready = true;
		synchronized (this) {
			this.notifyAll();
		}
	}

	/**
	 * Indicates if the request for this response has completed.
	 * 
	 * @return {@code true} if the request has completed and {@code get()} may
	 *         be called without blocking, else {@code false}.
	 */
	public boolean ready() {
		return this.ready;
	}

	/**
	 * Returns the Exception generated by the request for this response message.
	 * This method will return {@code null} if the response has not yet
	 * completed.
	 * 
	 * @return the Exception that this response's request generated, or
	 *         {@code null} if no error condition is present.
	 */
	public Exception getError() {
		return this.error;
	}

	/**
	 * Returns {@code true} if this response has an error associated with it,
	 * else {@code false}.
	 * 
	 * @return {@code true} if this response has an error.
	 */
	public boolean isError() {
		return (this.error != null);
	}

	/**
	 * Cancels the request associated with this {@code Response} object. 
	 */
	public void cancel() {
		this.conn.cancelSnapshot(this.ticketNumber);
	}

	/**
	 * Sets the request ticket number for this {@code Response}.  The request
	 * number is used internally for canceling requests. Should only be
	 * called by {@code ClientWorldConnection}.
	 * 
	 * @param ticketNumber
	 *            the request ticket number for this response.
	 */
	void setTicketNumber(final long ticketNumber) {
		this.ticketNumber = ticketNumber;
	}
}
